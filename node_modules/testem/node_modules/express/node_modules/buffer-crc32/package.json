{
  "_from": "buffer-crc32@0.1.1",
  "_id": "buffer-crc32@0.1.1",
  "_location": "/testem/express/buffer-crc32",
  "_phantomChildren": {},
  "_requiredBy": [
    "/testem/express",
    "/testem/express/connect"
  ],
  "_shrinkwrap": null,
  "author": {
    "email": "brianloveswords@gmail.com",
    "name": "Brian J. Brennan",
    "url": "http://bjb.io"
  },
  "bugs": {
    "url": "https://github.com/brianloveswords/buffer-crc32/issues"
  },
  "dependencies": {},
  "description": "A pure javascript CRC32 algorithm that plays nice with binary data",
  "devDependencies": {
    "tap": "~0.2.5"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/brianloveswords/buffer-crc32",
  "main": "index.js",
  "name": "buffer-crc32",
  "optionalDependencies": {},
  "readme": "# buffer-crc32\n\n[![Build Status](https://secure.travis-ci.org/brianloveswords/buffer-crc32.png?branch=master)](http://travis-ci.org/brianloveswords/buffer-crc32)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\n# install\n```\nnpm install buffer-crc32\n```\n\n# example\n```js\nvar crc32 = require('buffer-crc32');\n// works with buffers\nvar buf = Buffer([[0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00])\ncrc32(buf) // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf) // -> -1805997238\ncrc32.unsigned(buf) // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機') // -> <Buffer cb 03 1a c5>\n```\n\n# tests\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianloveswords/buffer-crc32.git"
  },
  "scripts": {
    "test": "tap tests/*.test.js"
  },
  "version": "0.1.1"
}
